%%%-------------------------------------------------------------------
%%% @author sarunas
%%% @copyright (C) 2019, <COMPANY>
%%% @doc
%%%
%%% @end
%%% Created : 18. Aug 2019 14.19
%%%-------------------------------------------------------------------
-module(erline_dht_examples).
-author("sarunas").

%% API
-export([
    find_node/0,
    find_node_resp/0,
    get_peers/0,
    get_peers_resp/0,
    announce_peer/0,
    announce_peer_resp/0
]).

%% Torrent hash representation = <<"CBA30EDBCB85A080586056855EBBCA3F6257CC75">>,
%% Torrent hash real = <<203,163,14,219,203,133,160,128,88,96,86,133,94,187,202,63,98,87,204,117>>
%% PeerID = 2d:44:45:31:33:43:30:2d:49:44:59:56:62:2e:2e:54:54:35:72:45

%%
%%  Peer -> me
%%
find_node() ->
    Req = <<16#64, 16#31, 16#3a, 16#61, 16#64, 16#32, 16#3a, 16#69, 16#64, 16#32, 16#30, 16#3a, 16#67, 16#91, 16#e9, 16#f1,
    16#f1, 16#bb, 16#e9, 16#eb, 16#b3, 16#a6, 16#db, 16#3c, 16#87, 16#0c, 16#3e, 16#99, 16#24, 16#5e, 16#0d, 16#90,
    16#36, 16#3a, 16#74, 16#61, 16#72, 16#67, 16#65, 16#74, 16#32, 16#30, 16#3a, 16#67, 16#91, 16#e9, 16#f1, 16#f1,
    16#bb, 16#e9, 16#eb, 16#b3, 16#a6, 16#db, 16#3c, 16#87, 16#0c, 16#3e, 16#99, 16#24, 16#5e, 16#0d, 16#90, 16#65,
    16#31, 16#3a, 16#71, 16#39, 16#3a, 16#66, 16#69, 16#6e, 16#64, 16#5f, 16#6e, 16#6f, 16#64, 16#65, 16#31, 16#3a,
    16#74, 16#34, 16#3a, 16#be, 16#00, 16#00, 16#00, 16#31, 16#3a, 16#76, 16#34, 16#3a, 16#55, 16#54, 16#a6, 16#50,
    16#31, 16#3a, 16#79, 16#31, 16#3a, 16#71, 16#65>>,
    io:format("~p~n", [erline_dht_bencoding:decode(Req)]).


%%
%%  Me -> peer
%%
find_node_resp() ->
    Resp = <<16#64, 16#32, 16#3a, 16#69, 16#70, 16#36, 16#3a, 16#bc, 16#ba, 16#04, 16#36, 16#0b, 16#e1, 16#31, 16#3a, 16#72,
    16#64, 16#32, 16#3a, 16#69, 16#64, 16#32, 16#30, 16#3a, 16#2c, 16#73, 16#55, 16#c6, 16#64, 16#bf, 16#9e, 16#06,
    16#d2, 16#b4, 16#96, 16#15, 16#b8, 16#15, 16#e7, 16#db, 16#e0, 16#c3, 16#6c, 16#0c, 16#35, 16#3a, 16#6e, 16#6f,
    16#64, 16#65, 16#73, 16#32, 16#30, 16#38, 16#3a, 16#67, 16#91, 16#27, 16#43, 16#63, 16#32, 16#0f, 16#b5, 16#39,
    16#eb, 16#02, 16#18, 16#70, 16#58, 16#be, 16#da, 16#24, 16#34, 16#fa, 16#e9, 16#c3, 16#18, 16#39, 16#85, 16#35,
    16#03, 16#67, 16#ab, 16#f3, 16#4d, 16#ac, 16#ff, 16#bb, 16#5b, 16#ff, 16#bb, 16#f3, 16#9b, 16#06, 16#ca, 16#07,
    16#66, 16#0b, 16#91, 16#da, 16#fa, 16#3e, 16#d2, 16#45, 16#e5, 16#d7, 16#28, 16#67, 16#33, 16#23, 16#eb, 16#b3,
    16#a6, 16#db, 16#3c, 16#87, 16#0c, 16#3e, 16#99, 16#24, 16#5e, 16#0d, 16#1c, 16#06, 16#b7, 16#47, 16#bb, 16#5f,
    16#6f, 16#67, 16#09, 16#30, 16#25, 16#67, 16#32, 16#30, 16#84, 16#36, 16#0d, 16#b0, 16#9e, 16#8a, 16#bb, 16#f4,
    16#85, 16#42, 16#6c, 16#ac, 16#a4, 16#94, 16#63, 16#7c, 16#7b, 16#55, 16#50, 16#f7, 16#37, 16#1a, 16#e1, 16#67,
    16#34, 16#98, 16#05, 16#ec, 16#95, 16#ac, 16#a3, 16#bb, 16#6c, 16#98, 16#cb, 16#c0, 16#24, 16#60, 16#e5, 16#55,
    16#fd, 16#4f, 16#c0, 16#57, 16#f9, 16#de, 16#8b, 16#dc, 16#73, 16#67, 16#37, 16#fc, 16#ad, 16#a5, 16#d5, 16#b9,
    16#9a, 16#14, 16#cc, 16#8a, 16#1f, 16#93, 16#da, 16#aa, 16#37, 16#8c, 16#da, 16#51, 16#27, 16#59, 16#9c, 16#c0,
    16#eb, 16#1a, 16#e9, 16#67, 16#37, 16#61, 16#01, 16#b4, 16#e7, 16#bd, 16#3e, 16#c0, 16#79, 16#b5, 16#00, 16#7c,
    16#8b, 16#6a, 16#1c, 16#e4, 16#72, 16#02, 16#fb, 16#b9, 16#2d, 16#c3, 16#af, 16#6e, 16#24, 16#67, 16#36, 16#e1,
    16#e5, 16#62, 16#96, 16#27, 16#a8, 16#5b, 16#de, 16#bf, 16#a1, 16#8f, 16#5e, 16#7a, 16#4a, 16#8c, 16#91, 16#c1,
    16#5e, 16#36, 16#c2, 16#87, 16#e9, 16#1a, 16#ec, 16#31, 16#3a, 16#70, 16#69, 16#33, 16#30, 16#34, 16#31, 16#65,
    16#65, 16#31, 16#3a, 16#74, 16#34, 16#3a, 16#be, 16#00, 16#00, 16#00, 16#31, 16#3a, 16#76, 16#34, 16#3a, 16#4c,
    16#54, 16#01, 16#00, 16#31, 16#3a, 16#79, 16#31, 16#3a, 16#72, 16#65>>,
    io:format("~p~n", [erline_dht_bencoding:decode(Resp)]).


%%
%%  Me -> peer
%%
get_peers() ->
    Req = <<16#64, 16#31, 16#3a, 16#61, 16#64, 16#32, 16#3a, 16#69, 16#64, 16#32, 16#30, 16#3a, 16#2c, 16#73, 16#55, 16#c6,
    16#64, 16#bf, 16#9e, 16#06, 16#d2, 16#b4, 16#96, 16#15, 16#b8, 16#15, 16#e7, 16#db, 16#e0, 16#c3, 16#6c, 16#0c,
    16#39, 16#3a, 16#69, 16#6e, 16#66, 16#6f, 16#5f, 16#68, 16#61, 16#73, 16#68, 16#32, 16#30, 16#3a, 16#cb, 16#a3,
    16#0e, 16#db, 16#cb, 16#85, 16#a0, 16#80, 16#58, 16#60, 16#56, 16#85, 16#5e, 16#bb, 16#ca, 16#3f, 16#62, 16#57,
    16#cc, 16#75, 16#65, 16#31, 16#3a, 16#71, 16#39, 16#3a, 16#67, 16#65, 16#74, 16#5f, 16#70, 16#65, 16#65, 16#72,
    16#73, 16#31, 16#3a, 16#74, 16#32, 16#3a, 16#1e, 16#a2, 16#31, 16#3a, 16#76, 16#34, 16#3a, 16#4c, 16#54, 16#01,
    16#00, 16#31, 16#3a, 16#79, 16#31, 16#3a, 16#71, 16#65>>,
    io:format("~p~n", [erline_dht_bencoding:decode(Req)]).


%%
%%  Peer -> me
%%
get_peers_resp() ->
    Resp = <<16#64, 16#32, 16#3a, 16#69, 16#70, 16#36, 16#3a, 16#4e, 16#38, 16#4b, 16#98, 16#d7, 16#ca, 16#31, 16#3a, 16#72,
    16#64, 16#32, 16#3a, 16#69, 16#64, 16#32, 16#30, 16#3a, 16#cb, 16#a3, 16#0e, 16#d6, 16#ae, 16#52, 16#90, 16#49,
    16#f1, 16#f1, 16#bb, 16#e9, 16#eb, 16#b3, 16#a6, 16#db, 16#3c, 16#87, 16#0c, 16#e1, 16#35, 16#3a, 16#6e, 16#6f,
    16#64, 16#65, 16#73, 16#32, 16#30, 16#38, 16#3a, 16#cb, 16#a3, 16#0f, 16#d6, 16#ae, 16#52, 16#90, 16#49, 16#f1,
    16#f1, 16#bb, 16#e9, 16#eb, 16#b3, 16#a6, 16#db, 16#3c, 16#87, 16#0c, 16#e1, 16#4e, 16#a5, 16#17, 16#47, 16#b4,
    16#da, 16#cb, 16#a3, 16#1c, 16#cf, 16#d4, 16#24, 16#cc, 16#fd, 16#20, 16#06, 16#16, 16#8d, 16#5f, 16#b6, 16#fb,
    16#40, 16#65, 16#8b, 16#05, 16#f0, 16#32, 16#e3, 16#fa, 16#5a, 16#01, 16#ae, 16#cb, 16#a3, 16#1b, 16#3e, 16#1a,
    16#51, 16#38, 16#0d, 16#62, 16#99, 16#41, 16#92, 16#30, 16#53, 16#e2, 16#7d, 16#47, 16#c8, 16#97, 16#50, 16#d4,
    16#b2, 16#87, 16#3e, 16#d7, 16#31, 16#cb, 16#a3, 16#16, 16#80, 16#b3, 16#c4, 16#75, 16#f6, 16#f7, 16#88, 16#80,
    16#a7, 16#b4, 16#aa, 16#f2, 16#1c, 16#26, 16#3d, 16#8f, 16#06, 16#70, 16#65, 16#ff, 16#58, 16#2f, 16#c0, 16#cb,
    16#a3, 16#17, 16#0a, 16#c4, 16#44, 16#2c, 16#ee, 16#27, 16#2a, 16#87, 16#f1, 16#20, 16#7f, 16#0e, 16#05, 16#25,
    16#eb, 16#9c, 16#d2, 16#5e, 16#4e, 16#ea, 16#c9, 16#e2, 16#45, 16#cb, 16#a3, 16#14, 16#f7, 16#90, 16#ae, 16#04,
    16#9f, 16#ed, 16#d6, 16#12, 16#26, 16#7f, 16#ec, 16#ae, 16#fc, 16#45, 16#01, 16#74, 16#8a, 16#6c, 16#18, 16#6c,
    16#1e, 16#97, 16#8b, 16#cb, 16#a3, 16#13, 16#3b, 16#ab, 16#00, 16#97, 16#02, 16#c2, 16#cc, 16#88, 16#46, 16#93,
    16#83, 16#4f, 16#53, 16#40, 16#05, 16#79, 16#da, 16#7a, 16#fe, 16#aa, 16#c9, 16#9f, 16#8f, 16#cb, 16#a3, 16#2f,
    16#2d, 16#af, 16#ba, 16#9a, 16#e5, 16#74, 16#e7, 16#da, 16#0b, 16#89, 16#4d, 16#f4, 16#15, 16#9f, 16#aa, 16#41,
    16#20, 16#6e, 16#4a, 16#71, 16#98, 16#ec, 16#49, 16#35, 16#3a, 16#74, 16#6f, 16#6b, 16#65, 16#6e, 16#32, 16#30,
    16#3a, 16#55, 16#19, 16#92, 16#a6, 16#cb, 16#cc, 16#51, 16#76, 16#ee, 16#a6, 16#e2, 16#69, 16#fa, 16#e3, 16#28,
    16#a2, 16#c7, 16#26, 16#64, 16#70, 16#36, 16#3a, 16#76, 16#61, 16#6c, 16#75, 16#65, 16#73, 16#6c, 16#36, 16#3a,
    16#5f, 16#37, 16#d0, 16#06, 16#57, 16#a9, 16#36, 16#3a, 16#b9, 16#03, 16#92, 16#97, 16#85, 16#e6, 16#36, 16#3a,
    16#b2, 16#cc, 16#b3, 16#be, 16#e6, 16#3f, 16#36, 16#3a, 16#6d, 16#fc, 16#49, 16#da, 16#23, 16#54, 16#36, 16#3a,
    16#2e, 16#95, 16#57, 16#18, 16#38, 16#5e, 16#36, 16#3a, 16#5b, 16#d8, 16#42, 16#ed, 16#62, 16#00, 16#36, 16#3a,
    16#6d, 16#fc, 16#13, 16#33, 16#0d, 16#b1, 16#36, 16#3a, 16#5d, 16#64, 16#94, 16#a4, 16#c8, 16#d5, 16#36, 16#3a,
    16#5c, 16#f0, 16#d1, 16#01, 16#c5, 16#d0, 16#36, 16#3a, 16#b2, 16#48, 16#44, 16#c3, 16#0b, 16#74, 16#36, 16#3a,
    16#4e, 16#9a, 16#bb, 16#0b, 16#53, 16#6c, 16#36, 16#3a, 16#4e, 16#09, 16#84, 16#10, 16#a7, 16#69, 16#36, 16#3a,
    16#0e, 16#ca, 16#da, 16#02, 16#ac, 16#1e, 16#36, 16#3a, 16#b2, 16#b8, 16#ae, 16#64, 16#b3, 16#4c, 16#36, 16#3a,
    16#05, 16#90, 16#3c, 16#0e, 16#de, 16#1a, 16#36, 16#3a, 16#5f, 16#6e, 16#07, 16#8d, 16#4c, 16#dc, 16#36, 16#3a,
    16#6d, 16#fc, 16#5a, 16#f1, 16#3c, 16#4c, 16#36, 16#3a, 16#50, 16#4d, 16#2a, 16#8f, 16#77, 16#51, 16#36, 16#3a,
    16#6d, 16#b8, 16#32, 16#a5, 16#5e, 16#e4, 16#36, 16#3a, 16#4d, 16#89, 16#76, 16#46, 16#b9, 16#a2, 16#36, 16#3a,
    16#05, 16#4c, 16#f1, 16#f4, 16#37, 16#08, 16#36, 16#3a, 16#4d, 16#8b, 16#86, 16#54, 16#1a, 16#e1, 16#36, 16#3a,
    16#5f, 16#1d, 16#6a, 16#99, 16#a5, 16#90, 16#36, 16#3a, 16#54, 16#36, 16#b3, 16#b7, 16#15, 16#3c, 16#36, 16#3a,
    16#6d, 16#ba, 16#cf, 16#2c, 16#2b, 16#34, 16#36, 16#3a, 16#5b, 16#d7, 16#35, 16#6c, 16#54, 16#71, 16#36, 16#3a,
    16#05, 16#a4, 16#e4, 16#ba, 16#42, 16#8b, 16#36, 16#3a, 16#b2, 16#48, 16#44, 16#c3, 16#0a, 16#81, 16#36, 16#3a,
    16#bc, 16#5c, 16#00, 16#c1, 16#96, 16#6a, 16#36, 16#3a, 16#1f, 16#cc, 16#b5, 16#85, 16#7a, 16#04, 16#36, 16#3a,
    16#4e, 16#9a, 16#bb, 16#0b, 16#49, 16#d1, 16#36, 16#3a, 16#4d, 16#89, 16#74, 16#54, 16#a9, 16#c3, 16#36, 16#3a,
    16#6d, 16#41, 16#09, 16#ce, 16#35, 16#e2, 16#36, 16#3a, 16#4e, 16#54, 16#22, 16#42, 16#c1, 16#a0, 16#36, 16#3a,
    16#50, 16#59, 16#4a, 16#2a, 16#b2, 16#cf, 16#36, 16#3a, 16#4e, 16#3c, 16#0e, 16#84, 16#7f, 16#ef, 16#36, 16#3a,
    16#5f, 16#4f, 16#b9, 16#83, 16#2c, 16#a2, 16#36, 16#3a, 16#b0, 16#0e, 16#c2, 16#c7, 16#cb, 16#7e, 16#36, 16#3a,
    16#b9, 16#39, 16#1c, 16#74, 16#5c, 16#e1, 16#36, 16#3a, 16#5a, 16#9a, 16#47, 16#e7, 16#2f, 16#ad, 16#36, 16#3a,
    16#5b, 16#fa, 16#1e, 16#52, 16#aa, 16#97, 16#36, 16#3a, 16#b2, 16#42, 16#6a, 16#82, 16#9a, 16#b5, 16#36, 16#3a,
    16#c2, 16#1c, 16#b6, 16#2b, 16#47, 16#70, 16#36, 16#3a, 16#d4, 16#22, 16#30, 16#16, 16#aa, 16#5b, 16#36, 16#3a,
    16#b9, 16#5c, 16#22, 16#75, 16#91, 16#cd, 16#36, 16#3a, 16#59, 16#1c, 16#6d, 16#6d, 16#41, 16#1f, 16#36, 16#3a,
    16#d4, 16#23, 16#b3, 16#2a, 16#05, 16#81, 16#36, 16#3a, 16#80, 16#47, 16#29, 16#dc, 16#d8, 16#41, 16#36, 16#3a,
    16#5d, 16#b9, 16#1d, 16#30, 16#89, 16#83, 16#36, 16#3a, 16#57, 16#ff, 16#1f, 16#e4, 16#07, 16#c3, 16#36, 16#3a,
    16#88, 16#a9, 16#37, 16#16, 16#57, 16#57, 16#36, 16#3a, 16#4e, 16#3f, 16#ef, 16#b7, 16#51, 16#63, 16#36, 16#3a,
    16#52, 16#83, 16#06, 16#ac, 16#aa, 16#9e, 16#36, 16#3a, 16#b2, 16#42, 16#76, 16#3e, 16#ad, 16#47, 16#36, 16#3a,
    16#9f, 16#e0, 16#40, 16#a3, 16#82, 16#a4, 16#36, 16#3a, 16#1f, 16#29, 16#72, 16#87, 16#f3, 16#8c, 16#36, 16#3a,
    16#4f, 16#a4, 16#78, 16#8b, 16#23, 16#27, 16#36, 16#3a, 16#5d, 16#7b, 16#a1, 16#b5, 16#65, 16#e5, 16#36, 16#3a,
    16#6d, 16#ac, 16#2e, 16#8b, 16#87, 16#76, 16#36, 16#3a, 16#4d, 16#78, 16#89, 16#95, 16#b2, 16#b8, 16#36, 16#3a,
    16#b2, 16#44, 16#6f, 16#d0, 16#3f, 16#fb, 16#36, 16#3a, 16#05, 16#3e, 16#29, 16#7f, 16#81, 16#ae, 16#36, 16#3a,
    16#4e, 16#3f, 16#cd, 16#a5, 16#3a, 16#c0, 16#36, 16#3a, 16#5b, 16#7a, 16#99, 16#35, 16#a9, 16#e6, 16#36, 16#3a,
    16#80, 16#49, 16#66, 16#c0, 16#87, 16#76, 16#36, 16#3a, 16#2e, 16#93, 16#1f, 16#9f, 16#d2, 16#a1, 16#36, 16#3a,
    16#6d, 16#6e, 16#47, 16#20, 16#73, 16#9c, 16#36, 16#3a, 16#bc, 16#5c, 16#00, 16#c1, 16#91, 16#db, 16#36, 16#3a,
    16#05, 16#89, 16#3d, 16#33, 16#48, 16#39, 16#36, 16#3a, 16#b2, 16#a3, 16#19, 16#37, 16#ca, 16#7b, 16#36, 16#3a,
    16#d4, 16#1c, 16#49, 16#10, 16#38, 16#0d, 16#36, 16#3a, 16#3e, 16#c7, 16#49, 16#2a, 16#7a, 16#95, 16#36, 16#3a,
    16#50, 16#50, 16#65, 16#0e, 16#24, 16#1e, 16#36, 16#3a, 16#4f, 16#b4, 16#f2, 16#11, 16#be, 16#46, 16#36, 16#3a,
    16#5b, 16#69, 16#6c, 16#47, 16#42, 16#86, 16#36, 16#3a, 16#2e, 16#27, 16#35, 16#07, 16#8a, 16#52, 16#36, 16#3a,
    16#4d, 16#33, 16#af, 16#9f, 16#76, 16#e1, 16#36, 16#3a, 16#05, 16#14, 16#49, 16#b4, 16#c7, 16#79, 16#36, 16#3a,
    16#5f, 16#20, 16#b6, 16#38, 16#8a, 16#5b, 16#36, 16#3a, 16#6d, 16#5f, 16#fa, 16#1c, 16#c8, 16#d5, 16#36, 16#3a,
    16#3e, 16#21, 16#93, 16#86, 16#82, 16#fc, 16#36, 16#3a, 16#6d, 16#fc, 16#17, 16#cd, 16#12, 16#1c, 16#36, 16#3a,
    16#52, 16#d0, 16#65, 16#96, 16#2e, 16#01, 16#36, 16#3a, 16#5f, 16#5c, 16#82, 16#1e, 16#56, 16#ce, 16#36, 16#3a,
    16#bc, 16#ba, 16#04, 16#36, 16#0b, 16#e1, 16#36, 16#3a, 16#c3, 16#05, 16#0a, 16#f6, 16#5f, 16#40, 16#36, 16#3a,
    16#58, 16#76, 16#d4, 16#02, 16#d7, 16#5c, 16#36, 16#3a, 16#2e, 16#62, 16#27, 16#3a, 16#61, 16#bd, 16#36, 16#3a,
    16#05, 16#2c, 16#a9, 16#cf, 16#72, 16#9d, 16#36, 16#3a, 16#5c, 16#27, 16#d8, 16#f8, 16#14, 16#38, 16#36, 16#3a,
    16#2e, 16#f2, 16#0a, 16#f0, 16#2e, 16#85, 16#36, 16#3a, 16#c1, 16#97, 16#0e, 16#49, 16#db, 16#d9, 16#36, 16#3a,
    16#62, 16#e9, 16#92, 16#a4, 16#fc, 16#0d, 16#36, 16#3a, 16#bc, 16#a3, 16#67, 16#42, 16#a3, 16#49, 16#36, 16#3a,
    16#6d, 16#ba, 16#1d, 16#69, 16#04, 16#34, 16#36, 16#3a, 16#6d, 16#6f, 16#9b, 16#6e, 16#df, 16#b6, 16#36, 16#3a,
    16#5b, 16#c8, 16#cb, 16#0b, 16#b8, 16#04, 16#36, 16#3a, 16#53, 16#63, 16#93, 16#d5, 16#22, 16#c1, 16#36, 16#3a,
    16#c3, 16#22, 16#c4, 16#4a, 16#67, 16#ed, 16#36, 16#3a, 16#5a, 16#8b, 16#ca, 16#60, 16#47, 16#b7, 16#65, 16#65,
    16#31, 16#3a, 16#74, 16#32, 16#3a, 16#1e, 16#a2, 16#31, 16#3a, 16#76, 16#34, 16#3a, 16#55, 16#54, 16#b0, 16#fd,
    16#31, 16#3a, 16#79, 16#31, 16#3a, 16#72, 16#65>>,
    io:format("~p~n", [erline_dht_bencoding:decode(Resp)]).


%%
%%  Me -> peer
%%
announce_peer() ->
    Req = <<16#64, 16#31, 16#3a, 16#61, 16#64, 16#32, 16#3a, 16#69, 16#64, 16#32, 16#30, 16#3a, 16#2c, 16#73, 16#55, 16#c6,
    16#64, 16#bf, 16#9e, 16#06, 16#d2, 16#b4, 16#96, 16#15, 16#b8, 16#15, 16#e7, 16#db, 16#e0, 16#c3, 16#6c, 16#0c,
    16#31, 16#32, 16#3a, 16#69, 16#6d, 16#70, 16#6c, 16#69, 16#65, 16#64, 16#5f, 16#70, 16#6f, 16#72, 16#74, 16#69,
    16#31, 16#65, 16#39, 16#3a, 16#69, 16#6e, 16#66, 16#6f, 16#5f, 16#68, 16#61, 16#73, 16#68, 16#32, 16#30, 16#3a,
    16#cb, 16#a3, 16#0e, 16#db, 16#cb, 16#85, 16#a0, 16#80, 16#58, 16#60, 16#56, 16#85, 16#5e, 16#bb, 16#ca, 16#3f,
    16#62, 16#57, 16#cc, 16#75, 16#34, 16#3a, 16#70, 16#6f, 16#72, 16#74, 16#69, 16#35, 16#35, 16#32, 16#34, 16#32,
    16#65, 16#34, 16#3a, 16#73, 16#65, 16#65, 16#64, 16#69, 16#30, 16#65, 16#35, 16#3a, 16#74, 16#6f, 16#6b, 16#65,
    16#6e, 16#32, 16#30, 16#3a, 16#55, 16#19, 16#92, 16#a6, 16#cb, 16#cc, 16#51, 16#76, 16#ee, 16#a6, 16#e2, 16#69,
    16#fa, 16#e3, 16#28, 16#a2, 16#c7, 16#26, 16#64, 16#70, 16#65, 16#31, 16#3a, 16#71, 16#31, 16#33, 16#3a, 16#61,
    16#6e, 16#6e, 16#6f, 16#75, 16#6e, 16#63, 16#65, 16#5f, 16#70, 16#65, 16#65, 16#72, 16#31, 16#3a, 16#74, 16#32,
    16#3a, 16#50, 16#a1, 16#31, 16#3a, 16#76, 16#34, 16#3a, 16#4c, 16#54, 16#01, 16#00, 16#31, 16#3a, 16#79, 16#31,
    16#3a, 16#71, 16#65>>,
    io:format("~p~n", [erline_dht_bencoding:decode(Req)]).


%%
%%  Peer -> me
%%
announce_peer_resp() ->
    Resp = <<16#64, 16#32, 16#3a, 16#69, 16#70, 16#36, 16#3a, 16#4e, 16#38, 16#4b, 16#98, 16#d7, 16#ca, 16#31, 16#3a, 16#72,
    16#64, 16#32, 16#3a, 16#69, 16#64, 16#32, 16#30, 16#3a, 16#cb, 16#a3, 16#0e, 16#d6, 16#ae, 16#52, 16#90, 16#49,
    16#f1, 16#f1, 16#bb, 16#e9, 16#eb, 16#b3, 16#a6, 16#db, 16#3c, 16#87, 16#0c, 16#e1, 16#65, 16#31, 16#3a, 16#74,
    16#32, 16#3a, 16#50, 16#a1, 16#31, 16#3a, 16#76, 16#34, 16#3a, 16#55, 16#54, 16#b0, 16#fd, 16#31, 16#3a, 16#79,
    16#31, 16#3a, 16#72, 16#65>>,
    io:format("~p~n", [erline_dht_bencoding:decode(Resp)]).


